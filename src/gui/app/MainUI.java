/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.app;

import entity.Student;
import utils.UtilsFunction;

import javax.swing.*;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author magic_000
 */
public class MainUI extends javax.swing.JFrame {

    ListSelectionListener listener;


    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textGender = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textEmail = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        textPhone = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        textAge = new javax.swing.JTextField();
        textBirthday = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableStudent = new javax.swing.JTable();
        labelId = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnLoadRefresh = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        labelStatus = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textClass = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name");

        textName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNameActionPerformed(evt);
            }
        });

        jLabel3.setText("Gender");

        textGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textGenderActionPerformed(evt);
            }
        });

        jLabel4.setText("Email");

        jLabel5.setText("Adress");

        textAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textAddressActionPerformed(evt);
            }
        });

        jLabel6.setText("Phone");

        jLabel7.setText("Age");

        jLabel8.setText("Birthday");

        textAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textAgeActionPerformed(evt);
            }
        });

        tableStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Adress", "Age", "Gender", "Email", "Phone", "Birthday", "Class"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableStudent);

        labelId.setText("idStudent");

        jLabel2.setText("ID");

        btnAdd.setText("Add a student");
        btnAdd.setToolTipText("");
        btnAdd.addActionListener((e)->{
            btnAddActionPerformed(e);
        });


        //btnAddActionPerformed(evt);
        btnLoadRefresh.setText("Refresh/Load Data");
        btnLoadRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadRefreshActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update student");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        labelStatus.setText("Status");

        jLabel9.setText("Class");

        jButton1.setText("Delete Selected Student");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(labelId))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(textAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                            .addComponent(textName)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                .addComponent(textAge, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                    .addComponent(textGender)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textBirthday)
                                    .addComponent(textClass)
                                    .addComponent(textPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addComponent(labelStatus))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnLoadRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(textGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelId)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(textEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(textPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(textClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelStatus)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textAgeActionPerformed

    private void textAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textAddressActionPerformed

    private void textNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNameActionPerformed

    private void textGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textGenderActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        this.labelStatus.setText("");
        if (this.textName.getText() == null) {
            this.labelStatus.setText("Student name is not null");
        } else {
            String textName = this.textName.getText().trim();
            if (textName.equals("")) {
                this.labelStatus.setText("Student name must only contain spaces");
            } else {
                int age;
                try {
                    age = Integer.parseInt(textAge.getText());
                } catch (NumberFormatException ne) {
                    labelStatus.setText("Age is not valid");
                    return;
                }
                this.labelStatus.setText("Adding student...");
                //boolean resultAddstudent;
                Student s = new Student();
                s.setName(textName);
                s.setAddress(textAddress.getText());
                s.setAge(age);
                s.setStudent_class(textClass.getText());
                s.setGender(textGender.getText());
                s.setEmail(textEmail.getText());
                s.setPhoneNumber(textPhone.getText());
                s.setBirthday(textBirthday.getText());
                boolean resAdd = UtilsFunction.addStudent(s);
                if (resAdd) {
                    labelStatus.setText("Add student successfully");




                    try{
                        List<Student> allStudent = UtilsFunction.getAllStudentFromServer();
                        DefaultTableModel model = (DefaultTableModel) this.tableStudent.getModel();
                        //remove listener
                        this.tableStudent.getSelectionModel().removeListSelectionListener(this.listener);
                        model.setRowCount(0);
                        allStudent.forEach(n -> {
                            UtilsFunction.addARowToAModel(model, n);
                        });

                        this.tableStudent.getSelectionModel().addListSelectionListener(this.listener);

                    }catch (Exception e){
                        e.printStackTrace();
                    }




                } else {
                    labelStatus.setText("Add student failed");
                }
                //s.setStudent_class(text);
            }
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnLoadRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadRefreshActionPerformed
        // TODO add your handling code here:
        //List<S>
        new Thread(() -> {
            labelStatus.setText("Loading data...");

            try {
                List<Student> allStudent = UtilsFunction.getAllStudentFromServer();
                DefaultTableModel model = (DefaultTableModel) this.tableStudent.getModel();

                //remove listener
                this.tableStudent.getSelectionModel().removeListSelectionListener(this.listener);
                model.setRowCount(0);
                allStudent.forEach((s) -> {
                    UtilsFunction.addARowToAModel(model, s);
                });

                this.tableStudent.getSelectionModel().addListSelectionListener(this.listener);
                labelStatus.setText("Load data done");
                // add all student to table
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }//GEN-LAST:event_btnLoadRefreshActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        //this.labelStatus.setText("");
        if (this.textName.getText() == null) {
            this.labelStatus.setText("Student name is not null");
        } else {
            String textName = this.textName.getText().trim();
            if (textName.equals("")) {
                this.labelStatus.setText("Student name must only contain spaces");
            } else {
                int age;
                try {
                    age = Integer.parseInt(textAge.getText());
                } catch (NumberFormatException ne) {
                    labelStatus.setText("Age is not valid");
                    return;
                }
                this.labelStatus.setText("Upadating student...");
                //boolean resultAddstudent;
                Student s = new Student();

                s.setId(Integer.parseInt(labelId.getText()));
                s.setName(textName);
                s.setAddress(textAddress.getText());
                s.setAge(age);
                s.setStudent_class(textClass.getText());
                s.setGender(textGender.getText());
                s.setEmail(textEmail.getText());
                s.setPhoneNumber(textPhone.getText());
                s.setBirthday(textBirthday.getText());
                boolean resAdd = UtilsFunction.updateStudent(s);
                if (resAdd) {
                    labelStatus.setText("Upadated student successfully");
                } else {
                    labelStatus.setText("Upadate student failed");
                }
                //s.setStudent_class(text);
            }
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    //Delete a student
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:


        System.out.println(this.idStudentSelected);


        boolean resDeleteStudent= UtilsFunction.deleteAStudent(this.idStudentSelected);

        if(resDeleteStudent){
            try {
                List<Student> allStudent = UtilsFunction.getAllStudentFromServer();
                DefaultTableModel model = (DefaultTableModel) this.tableStudent.getModel();
                this.tableStudent.getSelectionModel().removeListSelectionListener(this.listener);
                model.setRowCount(0);
                allStudent.forEach((s) -> {
                    UtilsFunction.addARowToAModel(model, s);
                });

                this.tableStudent.getSelectionModel().addListSelectionListener(this.listener);
                this.labelStatus.setText("Student deleted");
            }catch(Exception e){
                e.printStackTrace();
            }

        }else{
            this.labelStatus.setText("Delete student failed");
        }



    }//GEN-LAST:event_jButton1ActionPerformed

    void clearAllText() {
        this.textName.setText("");
        this.textAddress.setText("");
        this.textAge.setText("");
        this.textBirthday.setText("");
        this.textClass.setText("");
        this.textEmail.setText("");
        this.textPhone.setText("");
        this.textGender.setText("");
        //textBirthday
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            /*for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
             if ("Nimbus".equals(info.getName())) {
             javax.swing.UIManager.setLookAndFeel(info.getClassName());
             break;
             }
             }*/
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MainUI mainUI = new MainUI();
            mainUI.setTitle("Student Management System");
            mainUI.setVisible(true);
            mainUI.setResizable(false);

            JTable tableStudent = mainUI.tableStudent;


            mainUI.listener=(e)->{
                int selectRowIndex = tableStudent.getSelectedRow();
                List<Object> allRowData = getAllDataInARow(tableStudent, selectRowIndex);
                Student studentSelected = createAStudentFromListObject(allRowData);
                mainUI.copyDataFromStudentSelectedToTextFields(studentSelected);
                mainUI.idStudentSelected = studentSelected.getId();
                mainUI.indexRowSelected = selectRowIndex;
            };
            tableStudent.getSelectionModel().addListSelectionListener(mainUI.listener);



            /*tableStudent.getSelectionModel().addListSelectionListener((e) -> {
                //System.out.println();
                int selectRowIndex = tableStudent.getSelectedRow();
                List<Object> allRowData = getAllDataInARow(tableStudent, selectRowIndex);
                Student studentSelected = createAStudentFromListObject(allRowData);
                mainUI.copyDataFromStudentSelectedToTextFields(studentSelected);
                mainUI.idStudentSelected = studentSelected.getId();
                mainUI.indexRowSelected = selectRowIndex;
            });*/
            //new MainUI().setVisible(true);
        });
    }

    private static List<Object> getAllDataInARow(JTable table, int indexRow) {
        List<Object> allData = new ArrayList<>();

        // hard code, dummy code
        int numberOfCollumn = 9;
        for (int i = 0; i < numberOfCollumn; ++i) {
            try {
                Object data = table.getModel().getValueAt(indexRow, i);
                allData.add(data);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        return allData;
    }

    private void copyDataFromStudentSelectedToTextFields(Student s) {
        /*private javax.swing.JLabel labelId;
         private javax.swing.JTextField textAddress;
         private javax.swing.JTextField textAge;
         private javax.swing.JTextField textBirthday;
         private javax.swing.JTextField textClass;
         private javax.swing.JTextField textEmail;
         private javax.swing.JTextField textGender;
         private javax.swing.JTextField textName;
         private javax.swing.JTextField textPhone;*/

        labelId.setText(Integer.toString(s.getId()));
        textAddress.setText(s.getAddress());
        if (s.getAge() != null) {
            textAge.setText(Integer.toString(s.getAge()));
        }

        textBirthday.setText(s.getBirthday());
        textClass.setText(s.getStudent_class());
        textEmail.setText(s.getEmail());
        textGender.setText(s.getGender());
        textName.setText(s.getName());
        textPhone.setText(s.getPhoneNumber());

    }

    private static Student createAStudentFromListObject(List<Object> objects) {
        Student res = new Student();
        /* s.getId(), s.getName(), s.getAddress(), s.getAge(),
         s.getGender(), s.getEmail(), s.getPhoneNumber(), s.getBirthday(), s.getStudent_class() */
        //int id= (int)objects[0];
        res.setId((Integer) objects.get(0));
        res.setName((String) objects.get(1));
        res.setAddress((String) objects.get(2));
        res.setAge((Integer) objects.get(3));
        res.setGender((String) objects.get(4));
        res.setEmail((String) objects.get(5));
        res.setPhoneNumber((String) objects.get(6));
        res.setBirthday((String) objects.get(7));
        res.setStudent_class((String) objects.get(8));
        return res;
    }
    private int indexRowSelected = -1;
    private int idStudentSelected = -1;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnLoadRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelId;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JTable tableStudent;
    private javax.swing.JTextField textAddress;
    private javax.swing.JTextField textAge;
    private javax.swing.JTextField textBirthday;
    private javax.swing.JTextField textClass;
    private javax.swing.JTextField textEmail;
    private javax.swing.JTextField textGender;
    private javax.swing.JTextField textName;
    private javax.swing.JTextField textPhone;
    // End of variables declaration//GEN-END:variables
}
